From 12769f3f46e60626a8a60af5fceff6202c0e31da Mon Sep 17 00:00:00 2001
From: Paul Lesniewski <paul@squirrelmail.org>
Date: Tue, 3 Jan 2012 03:49:56 +0000
Subject: [PATCH 28/50] Default TLS CA data wasn't being loaded at all (thanks
 Orion Poplawski); Also fix TLS context not being initialized correctly

git-svn-id: https://svn.code.sf.net/p/squirrelmail/code/trunk/imap_proxy@14258 7612ce4b-ef26-0410-bec9-ea0150e637f0
---
 ChangeLog  |  5 ++++
 src/main.c | 88 +++++++++++++++++++++++++++++++-------------------------------
 2 files changed, 49 insertions(+), 44 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 4b6b2b8..3a5c7b5 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,8 @@
+2012-01-01  Paul Lesniewski <paul@squirrelmail.org>
+	* Fixed problem where default TLS CA data would never
+	  be loaded (thanks to Orion Poplawski)
+	* Fixed bug in SSL context initialization
+
 2011-12-16  Paul Lesniewski <paul@squirrelmail.org>
 	* Minor Makefile cleanup complements Brad Smith
 	* Fixed header include issue for OpenBSD (thanks to Brad Smith)
diff --git a/src/main.c b/src/main.c
index 2fe7d62..cbeae37 100644
--- a/src/main.c
+++ b/src/main.c
@@ -442,57 +442,57 @@ int main( int argc, char *argv[] )
 
 
 #if HAVE_LIBSSL
-    /*
-     * If we're going to support using STARTTLS to connect
-     * to the server, at a minimum we need a CA file (or path)
-     */
-    if ( PC_Struct.tls_ca_file || PC_Struct.tls_ca_path )
-    {
-	/* Initialize SSL_CTX */
-	syslog( LOG_INFO, "%s: Enabling openssl library.", fn );
-	SSL_library_init();
+    /* Initialize SSL_CTX */
+    syslog( LOG_INFO, "%s: Enabling openssl library.", fn );
+    SSL_library_init();
 
-	/* Set up OpenSSL thread protection */
-	ssl_thread_setup(fn);
+    /* Set up OpenSSL thread protection */
+    ssl_thread_setup(fn);
 
-	/* Need to seed PRNG, too! */
-	if ( RAND_egd( ( RAND_file_name( f_randfile, sizeof( f_randfile ) ) == f_randfile ) ? f_randfile : "/.rnd" ) )
-	{
-	    /* Not an EGD, so read and write it. */
-	    if ( RAND_load_file( f_randfile, -1 ) )
-	    RAND_write_file( f_randfile );
-	}
+    /* Need to seed PRNG, too! */
+    if ( RAND_egd( ( RAND_file_name( f_randfile, sizeof( f_randfile ) ) == f_randfile ) ? f_randfile : "/.rnd" ) )
+    {
+	/* Not an EGD, so read and write it. */
+	if ( RAND_load_file( f_randfile, -1 ) )
+	RAND_write_file( f_randfile );
+    }
 
-	SSL_load_error_strings();
-	tls_ctx = SSL_CTX_new( TLSv1_client_method() );
-	if ( tls_ctx == NULL )
-	{ 
-	    syslog(LOG_ERR, "%s: Failed to create new SSL_CTX.  Exiting.", fn);
-	    exit( 1 );
-	}
+    SSL_load_error_strings();
+    tls_ctx = SSL_CTX_new( TLSv1_client_method() );
+    if ( tls_ctx == NULL )
+    { 
+	syslog(LOG_ERR, "%s: Failed to create new SSL_CTX.  Exiting.", fn);
+	exit( 1 );
+    }
  
-	/* Work around all known bugs */
-	SSL_CTX_set_options( tls_ctx, SSL_OP_ALL );
+    /* Work around all known bugs */
+    SSL_CTX_set_options( tls_ctx, SSL_OP_ALL );
  
-	if ( ! SSL_CTX_load_verify_locations( tls_ctx,
-						PC_Struct.tls_ca_file,
-						PC_Struct.tls_ca_path ) ||
-	    ! SSL_CTX_set_default_verify_paths( tls_ctx ) )
-	{ 
-	    syslog(LOG_ERR, "%s: Failed to load CA data.  Exiting.", fn);
-	    exit( 1 );
-	}
+    if ( PC_Struct.tls_ca_file != NULL || PC_Struct.tls_ca_path != NULL )
+    {
+	rc = SSL_CTX_load_verify_locations( tls_ctx,
+					    PC_Struct.tls_ca_file,
+					    PC_Struct.tls_ca_path );
+    }
+    else
+    {
+	rc = SSL_CTX_set_default_verify_paths( tls_ctx );
+    }
+    if ( rc == 0 )
+    { 
+	syslog(LOG_ERR, "%s: Failed to load CA data.  Exiting.", fn);
+	exit( 1 );
+    }
  
-	if ( ! set_cert_stuff( tls_ctx,
-				PC_Struct.tls_cert_file,
-				PC_Struct.tls_key_file ) )
-	{ 
-	    syslog(LOG_ERR, "%s: Failed to load cert/key data.  Exiting.", fn);
-	    exit( 1 );
-	}
-
-	SSL_CTX_set_verify(tls_ctx, SSL_VERIFY_NONE, verify_callback);
+    if ( ! set_cert_stuff( tls_ctx,
+			    PC_Struct.tls_cert_file,
+			    PC_Struct.tls_key_file ) )
+    { 
+	syslog(LOG_ERR, "%s: Failed to load cert/key data.  Exiting.", fn);
+	exit( 1 );
     }
+
+    SSL_CTX_set_verify(tls_ctx, SSL_VERIFY_NONE, verify_callback);
 #endif /* HAVE_LIBSSL */
 
 
-- 
2.7.4

